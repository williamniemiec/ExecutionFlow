package executionFlow.core.file.parser;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.regex.Pattern;

import executionFlow.core.file.FileEncoding;


/**
 * Handles exceptions generated by asserts.
 * 
 * @author		William Niemiec &lt; williamniemiec@hotmail.com &gt;
 * @version		1.5
 * @since		1.5
 */
public class AssertFileParser extends FileParser
{
	//-------------------------------------------------------------------------
	//		Attributes
	//-------------------------------------------------------------------------
	private File file;
	private File outputDir;
	private String outputFilename;
	
	
	//-------------------------------------------------------------------------
	//		Constructor
	//-------------------------------------------------------------------------
	/**
	 * Handles exceptions generated by asserts. Specifically, for each assert, 
	 * it handles the {@link org.junit.ComparisonFailure} and 
	 * {@link org.junit.AssertFail} exceptions.
	 * 
	 * @param filename Path of the file to be parsed
	 * @param outputDir Directory where parsed file will be saved
	 * @param outputFilename Name of the parsed file
	 * @param encode File encoding
	 */ 
	public AssertFileParser(String filepath, String outputDir, String outputFilename, FileEncoding encode)
	{
		this(filepath, outputDir, outputFilename);
		this.encode = encode;
	}
	
	/**
	 * Handles exceptions generated by asserts. Specifically, for each assert, 
	 * it handles the {@link org.junit.ComparisonFailure} and 
	 * {@link org.junit.AssertFail} exceptions. Using this constructor, file 
	 * encoding will be UTF-8.
	 * 
	 * @param filename Path of the file to be parsed
	 * @param outputDir Directory where parsed file will be saved
	 * @param outputFilename Name of the parsed file
	 */ 
	public AssertFileParser(String filepath, String outputDir, String outputFilename)
	{
		this.file = new File(filepath);
		
		if (outputDir != null)
			this.outputDir = new File(outputDir);
		
		this.outputFilename = outputFilename;
	}
	
	
	//-------------------------------------------------------------------------
	//		Methods
	//-------------------------------------------------------------------------
	/**
	 * For each assert, it handles the {@link org.junit.ComparisonFailure} and 
	 * {@link org.junit.AssertFail} exceptions.
	 * 
	 * @return Path to parsed file
	 * @throws IOException If file encoding is incorrect or if file cannot be 
	 * read / written
	 */
	@Override
	public String parseFile() throws IOException
	{
		if (file == null) { return ""; }

		String line;
		File outputFile;
		Pattern pattern_assert = Pattern.compile("(\\ |\\t)+assert[A-z]+\\(.+\\);");
		
		// If an output directory is specified, processed file will be saved to it
		if (outputDir != null)
			outputFile = new File(outputDir, outputFilename+".java");
		else	// Else processed file will be saved in current directory
			outputFile = new File(outputFilename+".java");
		
		// Opens file streams (file to be parsed and output file / processed file)
		try (BufferedReader br = Files.newBufferedReader(file.toPath(), encode.getStandardCharset());
			 BufferedWriter bw = Files.newBufferedWriter(outputFile.toPath(), encode.getStandardCharset())) { 
			
			// Parses file line by line
			while ((line = br.readLine()) != null) {
				if (pattern_assert.matcher(line).find()) {
					int assertEnd = line.indexOf("//");
					String try_catch_message = "executionFlow.ConsoleOutput.showWarning(\"AssertFail(\"+e.getStackTrace()[2].getMethodName()+\") - \"+e.getMessage());";
					if (assertEnd == -1)
						line = "try {"+line+"} catch(org.junit.ComparisonFailure e){"+try_catch_message+"}";
					else {
						line = "try {" + line.substring(0, assertEnd)
							+ "} catch(org.junit.ComparisonFailure e){"+try_catch_message+"}"
							+ line.substring(assertEnd);
					}
				}
				
				bw.write(line);
				bw.newLine();
			}
		}

		return outputFile.getAbsolutePath();
	}
}
