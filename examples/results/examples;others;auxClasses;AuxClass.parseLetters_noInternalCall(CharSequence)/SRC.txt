package examples.others.auxClasses;
import java.util.Arrays;
import java.util.List;
import examples.polymorphism.ClassInterface;
public class AuxClass{
	public String text;
	private int num;
	@wniemiec.executionflow.runtime.CollectCalls public AuxClass(String t, int x){
		this.text = t;
	}
	@wniemiec.executionflow.runtime.CollectCalls public AuxClass(int num){
		this.num = num;
	}
	@wniemiec.executionflow.runtime.CollectCalls public AuxClass(int x, int y){
		x = 2;
	}
	@wniemiec.executionflow.runtime.CollectCalls public AuxClass(String x){
		x = "2";
	}
	@wniemiec.executionflow.runtime.CollectCalls public void test(int x, int y, String k){
		x = 3;
	}
	@wniemiec.executionflow.runtime.CollectCalls public void test2() {
	}
	@wniemiec.executionflow.runtime.CollectCalls public static void test3(int x, int y, String k){
		x = 0;
		while (x < 3) {int _20719d1c2f6c715a2353c69f52d84de1=0;
			x++;
		}
		x = 3;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static void test4() {
	}
	@wniemiec.executionflow.runtime.CollectCalls public long factorial(int x){
		long response = 1;
		int i=1;
		while (i<=x) {int _fae035c2eabe5377f334a41a640d6be4=0;
			response *= i;
			i++;
		}
		return response;
	}
	@wniemiec.executionflow.runtime.CollectCalls public long fibonacci(int x){
		long response = 1;
		long last = 1;
		long aux = 0;
		int i=2;
		while (i<x) {int _7861ad66b5418c392ba38bd2a7e6e668=0;
			aux = response;
			response = response + last;
			last = aux;
			i++;
		}
		return response;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static char[] parseLetters_noInternalCall(CharSequence cs){
		char[] letters = cs.toString().toCharArray();
		char[] response = new char[letters.length];
		int i=0;
		while (i<letters.length) {int _955f2411b2bb7533aa072c90988b21bd=0;
			if (letters[i] == Character.toUpperCase(letters[i])) {
				response[i] =  Character.toLowerCase(letters[i]);
			}
			else {int _518a923bfcd8bcc4d79003d2e6adcbb2=0;
				response[i] =  Character.toUpperCase(letters[i]);
			}
			i++;
		}
		return response;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static char[] parseLetters_withInternalCall(char[] letters){
		char[] response = new char[letters.length];
		int i=0;
		while (i<letters.length) {int _a214630a2a51e748c0f04814354bf245=0;
			response[i] = invertLetter(letters[i]);
			i++;
		}
		return response;
	}
	@wniemiec.executionflow.runtime.CollectCalls private static char invertLetter(char letter){
		if (letter == Character.toUpperCase(letter)) {
			return Character.toLowerCase(letter);
		}
		return Character.toUpperCase(letter);
	}
	@wniemiec.executionflow.runtime.CollectCalls public String threePaths(int num){
		if (num == 1) {
			return "one";
		}
		if (num == 2) {
			return "two";
		}
		return "";
	}
	@wniemiec.executionflow.runtime.CollectCalls public int testObjParam(Object obj){
		return obj.hashCode();
	}
	@wniemiec.executionflow.runtime.CollectCalls public int getNumber(){
		return num;
	}
	@wniemiec.executionflow.runtime.CollectCalls public List<Integer> identity(int num1, int num2, int num3, int num4, int num5){
		List<Integer> response = Arrays.asList( num1, num2, num3, num4, num5 );
		return response;
	}
	@wniemiec.executionflow.runtime.CollectCalls public ClassInterface anonymousObjectReturn(){
		return new ClassInterface("test") {
			@wniemiec.executionflow.runtime.CollectCalls public String interfaceMethod() {
				String str = "test";
				return str;
			}
		}
		;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static String trim(String text){
		if (text == null) {
			return "";
		}
		return text.trim();
	}
	@wniemiec.executionflow.runtime.CollectCalls public static String concatStrNum(String str, int num){
		return str + num;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static int countTotalArguments(Object... args){
		int i = 2;
		int k;int _86a2a24bf1c988cdc52e207ceaacdf78=0;
		k=0;
		while (k<args.length) {int _8fca0b1f799ee77e1bae243883137967=0;
			k++;
			if (Boolean.parseBoolean("True")) {continue;}
			k++;
		}
		return k;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static int countTotalArguments2(Object... args){
		int total = 0;
		int i=0;
		while (i<args.length) {int _e5270d7233f2931264f36f5440ecce98=0;
			if (i == 0) {
				i++;
				if (Boolean.parseBoolean("True")) {continue;}
			}
			total = i;
			i++;
		}
		return total;
	}
	@wniemiec.executionflow.runtime.CollectCalls public static void infinite() {
		while(true) ;
	}
}
