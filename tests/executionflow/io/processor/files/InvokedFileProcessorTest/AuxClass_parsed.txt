package org.apache.commons.io.filefilter;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.commons.io.IOCase;
public class FileFilterUtils {
@executionflow.runtime.CollectCalls private static <T extends Collection<File>> T filter(final IOFileFilter filter, final Iterable<File> files, final T acceptedFiles) {
if (filter == null) {
throw new IllegalArgumentException("file filter is null");
}
if (files != null) {
java.util.Iterator<File> _3747801ec7fc6262cfbb0f75b8bdcff7 = (java.util.Iterator<File>) executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(files);
while (_3747801ec7fc6262cfbb0f75b8bdcff7.hasNext()) {
File file = _3747801ec7fc6262cfbb0f75b8bdcff7.next();
if (file == null) {
throw new IllegalArgumentException("file collection contains null");
}
if (filter.accept(file)) {
acceptedFiles.add(file);
}
;
}
}
return acceptedFiles;
}
}
