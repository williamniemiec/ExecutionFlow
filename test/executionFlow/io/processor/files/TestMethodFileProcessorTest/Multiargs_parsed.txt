
public abstract class RealDistributionAbstractTest {
    /**
     * Verify that density integrals match the distribution.
     * The (filtered, sorted) cumulativeTestPoints array is used to source
     * integration limits. The integral of the density (estimated using a
     * Legendre-Gauss integrator) is compared with the cdf over the same
     * interval. Test points outside of the domain of the density function
     * are discarded.
     */
    @SuppressWarnings("deprecation")
    @Test @executionFlow.runtime._SkipInvoked
    public void testDensityIntegrals() {
        final double tol = 1.0e-9;
        final BaseAbstractUnivariateIntegrator integrator =
            new IterativeLegendreGaussIntegrator(5, 1.0e-12, 1.0e-10);
        final UnivariateFunction d = new UnivariateFunction() {
            public double value(double x) {
                return distribution.density(x);
            }
        };
        final ArrayList<Double> integrationTestPoints = new ArrayList<Double>();
        for (int i = 0; i < cumulativeTestPoints.length; i++) {
            if (Double.isNaN(cumulativeTestValues[i]) ||
                    cumulativeTestValues[i] < 1.0e-5 ||
                    cumulativeTestValues[i] > 1 - 1.0e-5) {
                continue; 
            }
            integrationTestPoints.add(cumulativeTestPoints[i]);
        }
        Collections.sort(integrationTestPoints);
        for (int i = 1; i < integrationTestPoints.size(); i++) {
            Assert.assertEquals(
                    distribution.cumulativeProbability(  
                            integrationTestPoints.get(0), integrationTestPoints.get(i)),                            integrator.integrate(                                    1000000,                                     d, integrationTestPoints.get(0),                                    integrationTestPoints.get(i)), tol);




        }
    }

    /**
     * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound
     * is finite and density is non-NaN, non-infinite there.
     */
    @SuppressWarnings("deprecation")
    @Test @executionFlow.runtime._SkipInvoked
    public void testIsSupportLowerBoundInclusive() {
        final double lowerBound = distribution.getSupportLowerBound();
        double result = Double.NaN;
        result = distribution.density(lowerBound);
        Assert.assertEquals(
                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&
                !Double.isInfinite(result),                distribution.isSupportLowerBoundInclusive());


    }
}
