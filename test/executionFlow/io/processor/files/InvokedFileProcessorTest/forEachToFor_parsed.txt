package net.objecthunter.exp4j;
import net.objecthunter.exp4j.function.Function;
import net.objecthunter.exp4j.function.Functions;
import net.objecthunter.exp4j.operator.Operator;
import net.objecthunter.exp4j.shuntingyard.ShuntingYard;
import java.util.*;
public class ExpressionBuilder {
private final String expression;
private final Map<String, Function> userFunctions;
private final Map<String, Operator> userOperators;
private final Set<String> variableNames;
private boolean implicitMultiplication = true;
@executionflow.runtime.CollectCalls public ExpressionBuilder(String expression) {
if (expression == null || expression.trim().length() == 0) {
throw new IllegalArgumentException("Expression can not be empty");
}
this.expression = expression;
this.userOperators = new HashMap<>(4);
this.userFunctions = new HashMap<>(4);
this.variableNames = new HashSet<>(4);
}
@executionflow.runtime.CollectCalls public ExpressionBuilder function(Function function) {
this.userFunctions.put(function.getName(), function);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder functions(Function... functions) {
java.util.Iterator<Function> _5610a825f26fb805a0fd137b3aeb8bda = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(functions);
while (_5610a825f26fb805a0fd137b3aeb8bda.hasNext()) {
Function f = _5610a825f26fb805a0fd137b3aeb8bda.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder functions(List<Function> functions) {
java.util.Iterator<Function> _a0ac74aecb78a8c769d804563791a29c = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(functions);
while (_a0ac74aecb78a8c769d804563791a29c.hasNext()) {
Function f = _a0ac74aecb78a8c769d804563791a29c.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variables(Set<String> variableNames) {
this.variableNames.addAll(variableNames);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variables(String... variableNames) {
Collections.addAll(this.variableNames, variableNames);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variable(String variableName) {
this.variableNames.add(variableName);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder implicitMultiplication(boolean enabled) {
this.implicitMultiplication = enabled;
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(Operator operator) {
this.checkOperatorSymbol(operator);
this.userOperators.put(operator.getSymbol(), operator);
return this;
}
@executionflow.runtime.CollectCalls private void checkOperatorSymbol(Operator op) {
String name = op.getSymbol();
java.util.Iterator<Character> _26be02205f9ddc225308f77a2a97a5b = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(name.toCharArray());
while (_26be02205f9ddc225308f77a2a97a5b.hasNext()) {
Character ch = _26be02205f9ddc225308f77a2a97a5b.next();
if (!Operator.isAllowedOperatorChar(ch)) {
throw new IllegalArgumentException("The operator symbol '" + name + "' is invalid");
}
;
}
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(Operator... operators) {
java.util.Iterator<Operator> _6a2ec2d8c056cfefe9194fe3f79fe0c3 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(operators);
while (_6a2ec2d8c056cfefe9194fe3f79fe0c3.hasNext()) {
Operator o = _6a2ec2d8c056cfefe9194fe3f79fe0c3.next();
this.operator(o);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(List<Operator> operators) {
java.util.Iterator<Operator> _e3722c16607b790735dda73a3a129577 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(operators);
while (_e3722c16607b790735dda73a3a129577.hasNext()) {
Operator o = _e3722c16607b790735dda73a3a129577.next();
this.operator(o);
;
}
return this;
}
@executionflow.runtime.CollectCalls public Expression build() {
if (expression.length() == 0) {
throw new IllegalArgumentException("The expression can not be empty");
}
variableNames.add("pi");
variableNames.add("π");
variableNames.add("e");
variableNames.add("φ");
java.util.Iterator<String> _d5facca6ee5ae28f90602f02efadc581 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(variableNames);
while (_d5facca6ee5ae28f90602f02efadc581.hasNext()) {
String var = _d5facca6ee5ae28f90602f02efadc581.next();
if (Functions.getBuiltinFunction(var) != null || userFunctions.containsKey(var)) {
throw new IllegalArgumentException("A variable can not have the same name as a function [" + var + "]");
}
;
}
return new Expression(ShuntingYard.convertToRPN(this.expression, this.userFunctions, this.userOperators, this.variableNames, this.implicitMultiplication), this.userFunctions.keySet());
}
}
