package net.objecthunter.exp4j;
import net.objecthunter.exp4j.function.Function;
import net.objecthunter.exp4j.function.Functions;
import net.objecthunter.exp4j.operator.Operator;
import net.objecthunter.exp4j.shuntingyard.ShuntingYard;
import java.util.*;
public class ExpressionBuilder {
private final String expression;
private final Map<String, Function> userFunctions;
private final Map<String, Operator> userOperators;
private final Set<String> variableNames;
private boolean implicitMultiplication = true;
@executionflow.runtime.CollectCalls public ExpressionBuilder(String expression) {
if (expression == null || expression.trim().length() == 0) {
throw new IllegalArgumentException("Expression can not be empty");
}
this.expression = expression;
this.userOperators = new HashMap<>(4);
this.userFunctions = new HashMap<>(4);
this.variableNames = new HashSet<>(4);
}
@executionflow.runtime.CollectCalls public ExpressionBuilder function(Function function) {
this.userFunctions.put(function.getName(), function);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder functions(Function... functions) {
java.util.Iterator<Function> _b77b705a95857c40a0d8c491ac5f6fb4 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(functions);
while (_b77b705a95857c40a0d8c491ac5f6fb4.hasNext()) {
Function f = _b77b705a95857c40a0d8c491ac5f6fb4.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder functions(List<Function> functions) {
java.util.Iterator<Function> _fe93701d6bf5781fae2049af58fae92e = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(functions);
while (_fe93701d6bf5781fae2049af58fae92e.hasNext()) {
Function f = _fe93701d6bf5781fae2049af58fae92e.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variables(Set<String> variableNames) {
this.variableNames.addAll(variableNames);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variables(String... variableNames) {
Collections.addAll(this.variableNames, variableNames);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder variable(String variableName) {
this.variableNames.add(variableName);
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder implicitMultiplication(boolean enabled) {
this.implicitMultiplication = enabled;
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(Operator operator) {
this.checkOperatorSymbol(operator);
this.userOperators.put(operator.getSymbol(), operator);
return this;
}
@executionflow.runtime.CollectCalls private void checkOperatorSymbol(Operator op) {
String name = op.getSymbol();
java.util.Iterator<Character> _d07777636f55af17efcfe9b9d804c99a = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(name.toCharArray());
while (_d07777636f55af17efcfe9b9d804c99a.hasNext()) {
Character ch = _d07777636f55af17efcfe9b9d804c99a.next();
if (!Operator.isAllowedOperatorChar(ch)) {
throw new IllegalArgumentException("The operator symbol '" + name + "' is invalid");
}
;
}
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(Operator... operators) {
java.util.Iterator<Operator> _c404556c4567c7793ef21019a303da52 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(operators);
while (_c404556c4567c7793ef21019a303da52.hasNext()) {
Operator o = _c404556c4567c7793ef21019a303da52.next();
this.operator(o);
;
}
return this;
}
@executionflow.runtime.CollectCalls public ExpressionBuilder operator(List<Operator> operators) {
java.util.Iterator<Operator> _768fee298a8734ceeb7d507e17a4d65c = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(operators);
while (_768fee298a8734ceeb7d507e17a4d65c.hasNext()) {
Operator o = _768fee298a8734ceeb7d507e17a4d65c.next();
this.operator(o);
;
}
return this;
}
@executionflow.runtime.CollectCalls public Expression build() {
if (expression.length() == 0) {
throw new IllegalArgumentException("The expression can not be empty");
}
variableNames.add("pi");
variableNames.add("π");
variableNames.add("e");
variableNames.add("φ");
java.util.Iterator<String> _ee8159b44867ac52a86d455c90f00009 = executionflow.io.processor.invoked.trgeneration.IteratorExtractor.extractIterator(variableNames);
while (_ee8159b44867ac52a86d455c90f00009.hasNext()) {
String var = _ee8159b44867ac52a86d455c90f00009.next();
if (Functions.getBuiltinFunction(var) != null || userFunctions.containsKey(var)) {
throw new IllegalArgumentException("A variable can not have the same name as a function [" + var + "]");
}
;
}
return new Expression(ShuntingYard.convertToRPN(this.expression, this.userFunctions, this.userOperators, this.variableNames, this.implicitMultiplication), this.userFunctions.keySet());
}
}
