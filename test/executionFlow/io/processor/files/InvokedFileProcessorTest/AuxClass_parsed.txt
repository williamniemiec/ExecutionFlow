package org.apache.commons.math3.analysis;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
import org.apache.commons.math3.analysis.function.Add;
import org.apache.commons.math3.analysis.function.Constant;
import org.apache.commons.math3.analysis.function.Cos;
import org.apache.commons.math3.analysis.function.Cosh;
import org.apache.commons.math3.analysis.function.Divide;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.function.Log;
import org.apache.commons.math3.analysis.function.Max;
import org.apache.commons.math3.analysis.function.Min;
import org.apache.commons.math3.analysis.function.Minus;
import org.apache.commons.math3.analysis.function.Multiply;
import org.apache.commons.math3.analysis.function.Pow;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.util.FastMath;
import org.junit.Assert;
import org.junit.Test;
@executionFlow.runtime.SkipCollection public class FunctionUtilsTest {
private final double EPS = FastMath.ulp(1d);
@org.junit.Test public void testCompose() {
UnivariateFunction id = new Identity();
try {        Assert.assertEquals(3, FunctionUtils.compose(id, id, id).value(3), EPS);} catch(Throwable _1ef09718153b729aa27f08274f2b19bb){}
UnivariateFunction c = new Constant(4);
try {        Assert.assertEquals(4, FunctionUtils.compose(id, c).value(3), EPS);} catch(Throwable _7d2481e4e0e1d11dbc173f958b64fd6){}
try {        Assert.assertEquals(4, FunctionUtils.compose(c, id).value(3), EPS);} catch(Throwable _a5c2290a9a720b8ce19125a22f047e9d){}
UnivariateFunction m = new Minus();
try {        Assert.assertEquals(-3, FunctionUtils.compose(m).value(3), EPS);} catch(Throwable _858332ce5e0a62c9fa07e727c901ea55){}
try {        Assert.assertEquals(3, FunctionUtils.compose(m, m).value(3), EPS);} catch(Throwable _d97bacdc1efac1b0b547750ff77c1a2e){}
UnivariateFunction inv = new Inverse();
try {        Assert.assertEquals(-0.25, FunctionUtils.compose(inv, m, c, id).value(3), EPS);} catch(Throwable _e948f144f640a1e992df027253bb8bf1){}
UnivariateFunction pow = new Power(2);
try {        Assert.assertEquals(81, FunctionUtils.compose(pow, pow).value(3), EPS);} catch(Throwable _fe4404dc1db34b9b01ca6ffb04ec7b89){}
}
@org.junit.Test public void testComposeDifferentiable() {
UnivariateDifferentiableFunction id = new Identity();
try {        Assert.assertEquals(1, FunctionUtils.compose(id, id, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _ec4963d6d41dfc97895599a13b3180f2){}
UnivariateDifferentiableFunction c = new Constant(4);
try {        Assert.assertEquals(0, FunctionUtils.compose(id, c).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _df4b46692d9bd12a2e03e9dc8d605cb5){}
try {        Assert.assertEquals(0, FunctionUtils.compose(c, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _dd00a94c5fb864883f5e033c66b57413){}
UnivariateDifferentiableFunction m = new Minus();
try {        Assert.assertEquals(-1, FunctionUtils.compose(m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _c38a7604f6bc46323dcfaa223c15fad8){}
try {        Assert.assertEquals(1, FunctionUtils.compose(m, m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _6f81fec5d941667a6345acd00765de94){}
UnivariateDifferentiableFunction inv = new Inverse();
try {        Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).value(new DerivativeStructure(1, 1, 0, 2)).getPartialDerivative(1), EPS);} catch(Throwable _77c2c29872d50b481a4de67db4f0c039){}
UnivariateDifferentiableFunction pow = new Power(2);
try {        Assert.assertEquals(108, FunctionUtils.compose(pow, pow).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS);} catch(Throwable _e476e9270d6e43d96275a82d09339143){}
UnivariateDifferentiableFunction log = new Log();
double a = 9876.54321;
try {        Assert.assertEquals(pow.value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1) / pow.value(a),                            FunctionUtils.compose(log, pow).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);} catch(Throwable _c944325e35bf465aaaaed689c147c885){}    }
@org.junit.Test public void testAdd() {
UnivariateFunction id = new Identity();
UnivariateFunction c = new Constant(4);
UnivariateFunction m = new Minus();
UnivariateFunction inv = new Inverse();
try {        Assert.assertEquals(4.5, FunctionUtils.add(inv, m, c, id).value(2), EPS);} catch(Throwable _f0ea4ec1eb9ad9895418d403d12e7a19){}
try {        Assert.assertEquals(4 + 2, FunctionUtils.add(c, id).value(2), EPS);} catch(Throwable _70107e5d9e463458f2295311b3e5edc){}
try {        Assert.assertEquals(4 - 2, FunctionUtils.add(c, FunctionUtils.compose(m, id)).value(2), EPS);} catch(Throwable _8b4528a032ea66e1d16d5b45937d20d0){}
}
@org.junit.Test public void testAddDifferentiable() {
UnivariateDifferentiableFunction sin = new Sin();
UnivariateDifferentiableFunction c = new Constant(4);
UnivariateDifferentiableFunction m = new Minus();
UnivariateDifferentiableFunction inv = new Inverse();
final double a = 123.456;
try {        Assert.assertEquals(- 1 / (a * a) -1 + FastMath.cos(a),                            FunctionUtils.add(inv, m, c, sin).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1),                            EPS);} catch(Throwable _707b9e69459623c7e286bc5838a6744d){}
}
@org.junit.Test public void testMultiply() {
UnivariateFunction c = new Constant(4);
try {        Assert.assertEquals(16, FunctionUtils.multiply(c, c).value(12345), EPS);} catch(Throwable _1aca3a0d32a4e0ce62f679984f11ef2e){}
UnivariateFunction inv = new Inverse();
UnivariateFunction pow = new Power(2);
try {        Assert.assertEquals(1, FunctionUtils.multiply(FunctionUtils.compose(inv, pow), pow).value(3.5), EPS);} catch(Throwable _f8c3a99989370e771b6275f9694bc677){}
}
@org.junit.Test public void testMultiplyDifferentiable() {
UnivariateDifferentiableFunction c = new Constant(4);
UnivariateDifferentiableFunction id = new Identity();
final double a = 1.2345678;
try {        Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);} catch(Throwable _5a13413e5b34199ed1d274f2011a443f){}
UnivariateDifferentiableFunction inv = new Inverse();
UnivariateDifferentiableFunction pow = new Power(2.5);
UnivariateDifferentiableFunction cos = new Cos();
try {        Assert.assertEquals(1.5 * FastMath.sqrt(a) * FastMath.cos(a) - FastMath.pow(a, 1.5) * FastMath.sin(a),                            FunctionUtils.multiply(inv, pow, cos).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS);} catch(Throwable _37c809c8a7a5ff4f4204602c6ce0e58e){}        UnivariateDifferentiableFunction cosh = new Cosh();
try {        Assert.assertEquals(1.5 * FastMath.sqrt(a) * FastMath.cosh(a) + FastMath.pow(a, 1.5) * FastMath.sinh(a),                            FunctionUtils.multiply(inv, pow, cosh).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), 8 * EPS);} catch(Throwable _76d98f756a9f6d1d1a552e5a220c1d8c){}    }
@org.junit.Test public void testCombine() {
BivariateFunction bi = new Add();
UnivariateFunction id = new Identity();
UnivariateFunction m = new Minus();
UnivariateFunction c = FunctionUtils.combine(bi, id, m);
try {        Assert.assertEquals(0, c.value(2.3456), EPS);} catch(Throwable _b77e356d08e469d41bb64f7fc3faee1e){}
bi = new Multiply();
UnivariateFunction inv = new Inverse();
c = FunctionUtils.combine(bi, id, inv);
try {        Assert.assertEquals(1, c.value(2.3456), EPS);} catch(Throwable _c8deaa7dfd431a302c2131f8fb0dbae8){}
}
@org.junit.Test public void testCollector() {
BivariateFunction bi = new Add();
MultivariateFunction coll = FunctionUtils.collector(bi, 0);
try {        Assert.assertEquals(10, coll.value(new double[] {1, 2, 3, 4}), EPS);} catch(Throwable _b9a2bb2d07ae32f80496e387233e1258){}
bi = new Multiply();
coll = FunctionUtils.collector(bi, 1);
try {        Assert.assertEquals(24, coll.value(new double[] {1, 2, 3, 4}), EPS);} catch(Throwable _4826f63ec4dd2d2add00511e74b87336){}
bi = new Max();
coll = FunctionUtils.collector(bi, Double.NEGATIVE_INFINITY);
try {        Assert.assertEquals(10, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);} catch(Throwable _9218aa77f17322de5044bcf0872e1f67){}
bi = new Min();
coll = FunctionUtils.collector(bi, Double.POSITIVE_INFINITY);
try {        Assert.assertEquals(-24, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);} catch(Throwable _74f3ad7edf3549bc63fdb0257c5a23f5){}
}
@org.junit.Test public void testSinc() {
BivariateFunction div = new Divide();
UnivariateFunction sin = new Sin();
UnivariateFunction id = new Identity();
UnivariateFunction sinc1 = FunctionUtils.combine(div, sin, id);
UnivariateFunction sinc2 = new Sinc();
int i = 0;
while (i < 10) {
double x = FastMath.random();
try {            Assert.assertEquals(sinc1.value(x), sinc2.value(x), EPS);} catch(Throwable _d5556c3755d4a8f7765d9e51b33c6f7){}
i++;
}
}
@org.junit.Test public void testFixingArguments() {
UnivariateFunction scaler = FunctionUtils.fix1stArgument(new Multiply(), 10);
try {        Assert.assertEquals(1.23456, scaler.value(0.123456), EPS);} catch(Throwable _d4390bdf161019585f396e0f4fb02a82){}
UnivariateFunction pow1 = new Power(2);
UnivariateFunction pow2 = FunctionUtils.fix2ndArgument(new Pow(), 2);
int i = 0;
while (i < 10) {
double x = FastMath.random() * 10;
try {            Assert.assertEquals(pow1.value(x), pow2.value(x), 0);} catch(Throwable _93433d0188b8e0d035a1bd1d9b40bc5d){}
i++;
}
}
@org.junit.Test(expected = NumberIsTooLargeException.class) public void testSampleWrongBounds(){
FunctionUtils.sample(new Sin(), FastMath.PI, 0.0, 10);
}
@org.junit.Test(expected = NotStrictlyPositiveException.class) public void testSampleNegativeNumberOfPoints(){
FunctionUtils.sample(new Sin(), 0.0, FastMath.PI, -1);
}
@org.junit.Test(expected = NotStrictlyPositiveException.class) public void testSampleNullNumberOfPoints(){
FunctionUtils.sample(new Sin(), 0.0, FastMath.PI, 0);
}
@org.junit.Test public void testSample() {
final int n = 11;
final double min = 0.0;
final double max = FastMath.PI;
final double[] actual = FunctionUtils.sample(new Sin(), min, max, n);
int i = 0;
while (i < n) {
final double x = min + (max - min) / n * i;
try {            Assert.assertEquals("    " + x, FastMath.sin(x), actual[i], 0.0);} catch(Throwable _5565382aef3c323a4f869db469f6e873){}
i++;
}
}
@org.junit.Test @Deprecated public void testToDifferentiableUnivariateFunction() {
Sin implements both UnivariateDifferentiableFunction and DifferentiableUnivariateFunction Sin sin = new Sin();
DifferentiableUnivariateFunction converted = FunctionUtils.toDifferentiableUnivariateFunction(sin);
double x = 0.1;
while (x < 0.5) {
Assert.assertEquals(sin.value(x), converted.value(x), 1.0e-10);
try {            Assert.assertEquals(sin.derivative().value(x), converted.derivative().value(x), 1.0e-10);} catch(Throwable _1c5363c7c36a244378348699b684ec28){}
x += 0.01;
}
}
package examples.others.auxClasses;
import java.util.Arrays;
import java.util.List;
import examples.polymorphism.ClassInterface;
public class AuxClass{
public String text;
private int num;
@executionflow.runtime.CollectCalls public AuxClass(String t, int x){
this.text = t;
}
@executionflow.runtime.CollectCalls public AuxClass(int num){
this.num = num;
}
@executionflow.runtime.CollectCalls public AuxClass(int x, int y){
x = 2;
}
@executionflow.runtime.CollectCalls public AuxClass(String x){
x = "2";
}
@executionflow.runtime.CollectCalls public void test(int x, int y, String k){
x = 3;
}
@executionflow.runtime.CollectCalls public void test2() {
}
@executionflow.runtime.CollectCalls public static void test3(int x, int y, String k){
x = 0;
while (x < 3) {
x++;
}
x = 3;
}
@executionflow.runtime.CollectCalls public static void test4() {
}
@executionflow.runtime.CollectCalls public long factorial(int x){
long response = 1;
int i=1;
while (i<=x) {
response *= i;
i++;
}
return response;
}
@executionflow.runtime.CollectCalls public long fibonacci(int x){
long response = 1;
long last = 1;
long aux = 0;
int i=2;
while (i<x) {
aux = response;
response = response + last;
last = aux;
i++;
}
return response;
}
@executionflow.runtime.CollectCalls public static char[] parseLetters_noInternalCall(CharSequence cs){
char[] letters = cs.toString().toCharArray();
char[] response = new char[letters.length];
int i=0;
while (i<letters.length) {
if (letters[i] == Character.toUpperCase(letters[i])) {
response[i] =  Character.toLowerCase(letters[i]);
}
else {int _cc2e4c9cb4d0aab71f3daf5857dc9f4c=0;
response[i] =  Character.toUpperCase(letters[i]);
}
i++;
}
return response;
}
@executionflow.runtime.CollectCalls public static char[] parseLetters_withInternalCall(char[] letters){
char[] response = new char[letters.length];
int i=0;
while (i<letters.length) {
response[i] = invertLetter(letters[i]);
i++;
}
return response;
}
@executionflow.runtime.CollectCalls private static char invertLetter(char letter){
if (letter == Character.toUpperCase(letter)) {
return Character.toLowerCase(letter);
}
return Character.toUpperCase(letter);
}
@executionflow.runtime.CollectCalls public String threePaths(int num){
if (num == 1) {
return "one";
}
if (num == 2) {
return "two";
}
return "";
}
@executionflow.runtime.CollectCalls public int testObjParam(Object obj){
return obj.hashCode();
}
@executionflow.runtime.CollectCalls public int getNumber(){
return num;
}
@executionflow.runtime.CollectCalls public List<Integer> identity(int num1, int num2, int num3, int num4, int num5){
List<Integer> response = Arrays.asList( num1, num2, num3, num4, num5 );
return response;
}
@executionflow.runtime.CollectCalls public ClassInterface anonymousObjectReturn(){
return new ClassInterface("test") {
@Override public String interfaceMethod() {
String str = "test";
return str;
}
}
;
}
@executionflow.runtime.CollectCalls public static String trim(String text){
if (text == null) {
return "";
}
return text.trim();
}
@executionflow.runtime.CollectCalls public static String concatStrNum(String str, int num){
return str + num;
}
@executionflow.runtime.CollectCalls public static int countTotalArguments(Object... args){
int i = 2;
int k;int _a4bdafd50b0217694aee70a19b766c2d=0;
k=0;
while (k<args.length) {
k++;
if (Boolean.parseBoolean("True")) {continue;}
k++;
}
return k;
}
@executionflow.runtime.CollectCalls public static int countTotalArguments2(Object... args){
int total = 0;
int i=0;
while (i<args.length) {
if (i == 0) {
i++;
if (Boolean.parseBoolean("True")) {continue;}
}
total = i;
i++;
}
return total;
}
}
}
