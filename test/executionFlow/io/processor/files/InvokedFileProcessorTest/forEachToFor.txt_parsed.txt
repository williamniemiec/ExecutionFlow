package net.objecthunter.exp4j;
import net.objecthunter.exp4j.function.Function;
import net.objecthunter.exp4j.function.Functions;
import net.objecthunter.exp4j.operator.Operator;
import net.objecthunter.exp4j.shuntingyard.ShuntingYard;
import java.util.*;
public class ExpressionBuilder {
private final String expression;
private final Map<String, Function> userFunctions;
private final Map<String, Operator> userOperators;
private final Set<String> variableNames;
private boolean implicitMultiplication = true;
@executionFlow.runtime.CollectCalls public ExpressionBuilder(String expression) {
if (expression == null || expression.trim().length() == 0) {
throw new IllegalArgumentException("Expression can not be empty");
}
this.expression = expression;
this.userOperators = new HashMap<>(4);
this.userFunctions = new HashMap<>(4);
this.variableNames = new HashSet<>(4);
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder function(Function function) {
this.userFunctions.put(function.getName(), function);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder functions(Function... functions) {
java.util.Iterator<Function> _4e9aaf38e3be37242ae90f79eb3b5fd7 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(functions);
while (_4e9aaf38e3be37242ae90f79eb3b5fd7.hasNext()) {
Function f = _4e9aaf38e3be37242ae90f79eb3b5fd7.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder functions(List<Function> functions) {
java.util.Iterator<Function> _a70933d47e8e5a7fb886f4b342fa1033 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(functions);
while (_a70933d47e8e5a7fb886f4b342fa1033.hasNext()) {
Function f = _a70933d47e8e5a7fb886f4b342fa1033.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variables(Set<String> variableNames) {
this.variableNames.addAll(variableNames);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variables(String... variableNames) {
Collections.addAll(this.variableNames, variableNames);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variable(String variableName) {
this.variableNames.add(variableName);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder implicitMultiplication(boolean enabled) {
this.implicitMultiplication = enabled;
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(Operator operator) {
this.checkOperatorSymbol(operator);
this.userOperators.put(operator.getSymbol(), operator);
return this;
}
@executionFlow.runtime.CollectCalls private void checkOperatorSymbol(Operator op) {
String name = op.getSymbol();
java.util.Iterator<Character> _31cb1d4efe7f6dd964eb68e28798958 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(name.toCharArray());
while (_31cb1d4efe7f6dd964eb68e28798958.hasNext()) {
Character ch = _31cb1d4efe7f6dd964eb68e28798958.next();
if (!Operator.isAllowedOperatorChar(ch)) {
throw new IllegalArgumentException("The operator symbol '" + name + "' is invalid");
}
;
}
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(Operator... operators) {
java.util.Iterator<Operator> _c9a65dbc6ac0ff40b6dc584c349db540 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(operators);
while (_c9a65dbc6ac0ff40b6dc584c349db540.hasNext()) {
Operator o = _c9a65dbc6ac0ff40b6dc584c349db540.next();
this.operator(o);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(List<Operator> operators) {
java.util.Iterator<Operator> _7b6e4ca6513a10e904ff7683aca8dbf4 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(operators);
while (_7b6e4ca6513a10e904ff7683aca8dbf4.hasNext()) {
Operator o = _7b6e4ca6513a10e904ff7683aca8dbf4.next();
this.operator(o);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public Expression build() {
if (expression.length() == 0) {
throw new IllegalArgumentException("The expression can not be empty");
}
variableNames.add("pi");
variableNames.add("π");
variableNames.add("e");
variableNames.add("φ");
java.util.Iterator<String> _7df5578b2a15f87b05d4e4d3ea61a405 = executionFlow.io.processor.parser.trgeneration.IteratorExtractor.extractIterator(variableNames);
while (_7df5578b2a15f87b05d4e4d3ea61a405.hasNext()) {
String var = _7df5578b2a15f87b05d4e4d3ea61a405.next();
if (Functions.getBuiltinFunction(var) != null || userFunctions.containsKey(var)) {
throw new IllegalArgumentException("A variable can not have the same name as a function [" + var + "]");
}
;
}
return new Expression(ShuntingYard.convertToRPN(this.expression, this.userFunctions, this.userOperators, this.variableNames, this.implicitMultiplication), this.userFunctions.keySet());
}
}
