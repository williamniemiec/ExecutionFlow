package net.objecthunter.exp4j;
import net.objecthunter.exp4j.function.Function;
import net.objecthunter.exp4j.function.Functions;
import net.objecthunter.exp4j.operator.Operator;
import net.objecthunter.exp4j.shuntingyard.ShuntingYard;
import java.util.*;
public class ExpressionBuilder {
private final String expression;
private final Map<String, Function> userFunctions;
private final Map<String, Operator> userOperators;
private final Set<String> variableNames;
private boolean implicitMultiplication = true;
@executionFlow.runtime.CollectCalls public ExpressionBuilder(String expression) {
if (expression == null || expression.trim().length() == 0) {
throw new IllegalArgumentException("Expression can not be empty");
}
this.expression = expression;
this.userOperators = new HashMap<>(4);
this.userFunctions = new HashMap<>(4);
this.variableNames = new HashSet<>(4);
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder function(Function function) {
this.userFunctions.put(function.getName(), function);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder functions(Function... functions) {
Iterator<Function> _7333d09c2be9b210144cb3004b24cc3e = executionFlow.util.IteratorExtractor.extractIterator(functions).iterator();
while (_7333d09c2be9b210144cb3004b24cc3e.hasNext()) {
Function f = _7333d09c2be9b210144cb3004b24cc3e.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder functions(List<Function> functions) {
Iterator<Function> _c58ecd3af91170e7c45209041942fb36 = executionFlow.util.IteratorExtractor.extractIterator(functions).iterator();
while (_c58ecd3af91170e7c45209041942fb36.hasNext()) {
Function f = _c58ecd3af91170e7c45209041942fb36.next();
this.userFunctions.put(f.getName(), f);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variables(Set<String> variableNames) {
this.variableNames.addAll(variableNames);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variables(String... variableNames) {
Collections.addAll(this.variableNames, variableNames);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder variable(String variableName) {
this.variableNames.add(variableName);
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder implicitMultiplication(boolean enabled) {
this.implicitMultiplication = enabled;
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(Operator operator) {
this.checkOperatorSymbol(operator);
this.userOperators.put(operator.getSymbol(), operator);
return this;
}
@executionFlow.runtime.CollectCalls private void checkOperatorSymbol(Operator op) {
String name = op.getSymbol();
Iterator<Character> _7b3783fa849a5edf016c8b546a3b0415 = executionFlow.util.IteratorExtractor.extractIterator(name.toCharArray()).iterator();
while (_7b3783fa849a5edf016c8b546a3b0415.hasNext()) {
Character ch = _7b3783fa849a5edf016c8b546a3b0415.next();
if (!Operator.isAllowedOperatorChar(ch)) {
throw new IllegalArgumentException("The operator symbol '" + name + "' is invalid");
}
;
}
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(Operator... operators) {
Iterator<Operator> _5484a2655cee251b819d3dcdc7ce89e = executionFlow.util.IteratorExtractor.extractIterator(operators).iterator();
while (_5484a2655cee251b819d3dcdc7ce89e.hasNext()) {
Operator o = _5484a2655cee251b819d3dcdc7ce89e.next();
this.operator(o);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public ExpressionBuilder operator(List<Operator> operators) {
Iterator<Operator> _7470e8cf691b25bb296c2cdc9c4147de = executionFlow.util.IteratorExtractor.extractIterator(operators).iterator();
while (_7470e8cf691b25bb296c2cdc9c4147de.hasNext()) {
Operator o = _7470e8cf691b25bb296c2cdc9c4147de.next();
this.operator(o);
;
}
return this;
}
@executionFlow.runtime.CollectCalls public Expression build() {
if (expression.length() == 0) {
throw new IllegalArgumentException("The expression can not be empty");
}
variableNames.add("pi");
variableNames.add("π");
variableNames.add("e");
variableNames.add("φ");
Iterator<String> _41f11f602832c11e215a32630c6fa626 = executionFlow.util.IteratorExtractor.extractIterator(variableNames).iterator();
while (_41f11f602832c11e215a32630c6fa626.hasNext()) {
String var = _41f11f602832c11e215a32630c6fa626.next();
if (Functions.getBuiltinFunction(var) != null || userFunctions.containsKey(var)) {
throw new IllegalArgumentException("A variable can not have the same name as a function [" + var + "]");
}
;
}
return new Expression(ShuntingYard.convertToRPN(this.expression, this.userFunctions, this.userOperators, this.variableNames, this.implicitMultiplication), this.userFunctions.keySet());
}
}
